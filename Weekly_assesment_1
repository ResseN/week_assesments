#  1. Spin up VM.
#  VM was deployed on AWS with white ip (3.123.228.217), open port 80, 8080 and Debian 11 OS.

#  2. Install Nginx web server and git

sudo apt update
sudo apt upgrade
sudo apt install -y nginx git
systemctl start nginx
systemctl enable nginx
git --version
git config --global user.name=Rurenko Yuriy
git config --global user.email=rurenkou@gmail.com

#  3. Fork GitHub repo https://github.com/joashp/material-design-template

#  Create fork on repository https://github.com/joashp/material-design-template by clicking Fork button 
#  Rename forked repository to short name https://github.com/ResseN/mdt.  (Screenshot1)

#  Create 2 local repository. First for dev to make changes, second for prod to check changes

mkdir /var/www/html/prod 
mkdir /home/${USER}/dev
cd /var/www/html/prod
git clone https://github.com/ResseN/mdt
cd /home/${USER}/dev
git clone https://github.com/ResseN/mdt

# Create nginx host

cp /etc/nginx/sites-available/default /etc/nginx/sites-available/mdt
sed -i 's*/var/www/html*/var/www/html/prod/mdt/www*g' /etc/nginx/sites-available/mdt
ln -s /etc/nginx/sites-available/mdt /etc/nginx/sites-enabled/mdt
nginx -t
systemctl reload nginx

#  Site is accessible from internet on link http://3.123.228.217

# 4. Setup a cron job for a regular (every 1 minute) checkout from main branch https://github.com/YOURNAME/mdt-fork 

crontab -e -u $USER
#add next line 
* * * * * cd /var/www/html/prod/mdt && sudo git pull origin master

#check crontab log
#(Screenshot2)


#  5  Update index.html from your machine, push changes to Git and confirm updated content on web page
sed -i 's/Flash/Rembo/g' /home/${USER}/dev/mdt/www/index.html
git status
git add .
git commit -m "changed Flash to Rembo"
git push origin master

# Enter mail and Token
# Wait cron and check changes in site. (Screenshot3)

#  6. Configure Github hook instead of cron.
#  disable cron job
crontab -r -u $USER

# Github hook its a POST request to our site url after event occurs. In our case that event is push. I have 2 variants of solutions that task. 
# First variant via operating system tools and scripts. That method is unsafe but working in our case.
# POST request is request to our webserver nginx. We can find that request in access.log of nginx. 
# So we can create a script  which will check log and execute required commands.  After that we can create a service of that script.

sudo nano /usr/bin/check_webhook.sh

# add next text to the file

tail -fn0 /var/log/nginx/access.log | \
while read line ; do
        echo "$line" | grep "GitHub-Hookshot/9b4b05d"
        if [ $? = 0 ]
        then
                cd /var/www/html/prod/mdt && sudo git pull origin master
        fi
done

# save and close the file

sudo chmod u+x /usr/bin/check_webhook.sh

# create service

sudo nano /etc/systemd/system/webhook.service

# add next text

[Unit]
Description=Webhook Check Service
After=network.target
StartLimitIntervalSec=10

[Service]
Type=simple
Restart=always
RestartSec=1
User=root
ExecStart=/bin/bash /usr/bin/check_webhook.sh

[Install]
WantedBy=multi-user.target

# save and close the file

systemctl daemon-reload
systemctl start webhook
systemctl ebable webhook

# Create webhook from github repository. (Screenshot5)

# Now we can make changes on dev repostiry and take push on github and automatically changes will pulled on prod repository  
#  Second variant via external solutions, for example webhookd from https://github.com/ncarlier/webhookd
# Install the app

echo "deb [signed-by=/usr/share/keyrings/azlux-archive-keyring.gpg] http://packages.azlux.fr/debian/ bullseye main" | sudo tee /etc/apt/sources.list.d/azlux.list
sudo wget -O /usr/share/keyrings/azlux-archive-keyring.gpg  https://azlux.fr/repo.gpg
apt update
apt install webhookd

#Configure app

echo WHD_HOOK_LOG_DIR="/var/log/webhookd.log" >> /etc/default/webhookd.env
echo WHD_NOTIFICATION_URI=http://3.123.228.217/addtowebhookfromgithub >> /etc/default/webhookd.env
systemctl start webhookd
systemctl enable webhookd
mkdir /var/log/webhookd.log /opt/scripts
chown webhookd /var/etc/webhookd.log
chmod 755 /var/etc/webhookd.log
echo '#! /bin/bash cd /var/www/html/prod/mdt && sudo git pull origin master' > addtowebhookfromgithub.sh
chmod +x addtowebhookfromgithub.sh
echo 'webhookd  ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Set new webhook from github repository
(Screenshot4)

## Now we can make changes on dev repostiry and take push on github and automatically changes will pulled on prod repository

#  7. Use local git hooks for validation of incoming commits (reject commits if there is a “shit” string in the files)
# Hook that we need is pre-commit - script that executed on stage before commit
# Create new script in .git/hooks/pre-commit
touch /home/${USER}/dev/mdt/.git/hooks/pre-commit
chmod +x /home/${USER}/dev/mdt/.git/hooks/pre-commit
# Add next text to script

#! /bin/bash

verified_string=shit
git diff --cached | grep -i ${verified_string} &> /dev/null && checker=0 || checker=1

if [ ${checker} -eq 0 ];  then
  echo "Your current commit has forbidden content. Please eliminate the issue with ${verified_string}"
  exit 1
else
  echo "Verification passed"
  exit 0
fi

# Close and safe file. Thats all - hook will start automatically on stage pre-commit. Verified_string is case unsensitive.

#  8. Configure Nginx to Proxy Websockets and cache static content within 1 hour 
#  To demonstrate working nginx config for proxy websocket we need to deploy server and client between which would established websocket connection. 
#  To do this we will use node.js tools for working with websockets. Thats name ws from https://github.com/websockets/ws
#  Installing 
apt-get install nodejs npm
ln -s /usr/bin/nodejs /usr/local/bin/node
npm install ws wscat
touch server.js
# Add next text


console.log("Server started");
var Msg = '';
var WebSocketServer = require('ws').Server
    , wss = new WebSocketServer({port: 8010});     # set port for server
    wss.on('connection', function(ws) {
        ws.on('message', function(message) {
        console.log('Received from client: %s', message);
        ws.send('Server received from client: ' + message);
    });
 });

# Start the server
node server.js 
#server started and ready to receive connections
# next run the client side
/usr/local/lib/node_modules/wscat/bin/wscat --connect ws://localhost:8010     # connect directly to check that all is working
# Connected (press CTRL+C to quit)
# > Hello
# < Server received from client: Hello

#  Next we configure nginx to proxy request to our websocket server (not for websocket protocol)
nano /etc/nginx/sites-available/socket
#  Add next text

    upstream websocket {
        server localhost:8010;
    }

    server {
        listen 8020;
        location / {
            proxy_pass http://websocket;
        }
    }

ln -s /etc/nginx/sites-available/socket /etc/sites-enabled/socket   
nginx -t 
systemctl reload nginx

#  Check via curl to make sure that nginx cofigured right

curl localhost:8010
#  Upgrade Required
curl localhost:8020
#  Upgrade Required
#  Nginx configured to proxy request right
#  Next check from client websocket

/usr/local/lib/node_modules/wscat/bin/wscat --connect ws://localhost:8020     # connect via nginx  to check that we has problem

#  error: Unexpected server response: 426

#  Now need make config to proxy websocket. Set /etc/nginx/sites-available/socket to the next view

nano /etc/nginx/sites-available/socket

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    upstream websocket {
        server localhost:8010;
    }

    server {
        listen 8020;
        location / {
            proxy_pass http://websocket;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
        }
    }
#  Headers Upgrade and Connection are missed when proxying request, so we must set their manually from nginx 
#  Testing connection - all is good!

/usr/local/lib/node_modules/wscat/bin/wscat --connect ws://localhost:8020

#  Connected (press CTRL+C to quit)
#  > hello server
#  < Server received from client: hello server
 
#  Next set cache static content within 1 hour  in host mdt]

nano /etc/nginx/sites-available/mdt 

server {
        listen 80 default_server;
        listen [::]:80 default_server;
        root /var/www/html/prod/mdt/www;
        index index.html index.htm index.nginx-debian.html;
        server_name _;
                    
        location ~* \.(?:html?|xml|json|jpg|jpeg|gif|png|ico|css|js)$ {
          expires 1h;
          add_header Cache-Control "public";
          access_log off;
        }
}
nginx -t
systemctl reload nginx
#  Check that changes applied
curl -i localhost

HTTP/1.1 200 OK
Server: nginx/1.18.0
Date: Tue, 12 Oct 2021 20:47:04 GMT                     # Start time
Content-Type: text/html
Content-Length: 19988
Last-Modified: Mon, 11 Oct 2021 17:43:00 GMT
Connection: keep-alive
ETag: "616477a4-4e14"
Expires: Tue, 12 Oct 2021 21:47:04 GMT                  # Endd time after 1 hour 
Cache-Control: max-age=3600
Cache-Control: public
Accept-Ranges: bytes
 
 
#  9. Merge feature branch with main, rebase git merge commit, squash all commits
 
 git checkout -b feature
 git add .
 git commit -m ""
 git checkout master
 git merge feature
 git log --graph
 (Screenshot6)
 
 git rebase -i HEAD~21
 git log graph
 (Screenshot7)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
